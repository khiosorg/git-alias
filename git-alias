#!/usr/bin/env bash

readonly version=0.1.2

usage() {
  echo "git-alias: usage: git alias [-p] [name[=value] ... ]" >&2
}

full_usage() {
  cat << EOS
git-alias: git alias [-p] [name[=value] ... ]
    Define or display aliases.

    Without arguments, \`git alias' prints the list of aliases in the reusable
    form \`git alias NAME=VALUE' on standard output.

    Otherwise, an alias is defined for each NAME whose VALUE is given.
    A trailing space in VALUE causes the next word to be checked for
    alias substitution when the alias is expanded.

    Options:
      -p	print all defined aliases in a reusable format

    Exit Status:
    alias returns true unless a NAME is supplied for which no alias has been
    defined.

    Note: This message is quoted from Bash builtin \`alias' command's help.
EOS
}

parse_short_options() {
  local opt=$1

  if [[ $opt == *p* ]]; then
    should_print_all=true
    opt=${opt//p/}
  fi

  if [[ $opt ]]; then
    echo "git-alias: -${opt:0:1}: invalid option" >&2
    usage
    exit 2
  fi
}

should_print_all=false

for arg in "$@"; do
  case $arg in
    -- )
      shift
      break
      ;;

    --help )
      full_usage
      exit 2
      ;;

    -?* )
      parse_short_options "${arg:1}"
      shift
      ;;

    * )
      break
      ;;
  esac
done

if [ $# -eq 0 ]; then # including `git alias --'
  should_print_all=true
fi

# Parsing of arguments is over.
# Move on to the part of printing and/or definition of aliases.

define() {
  git config --global "alias.$1" "$2"
  if [ $? -ne 0 ]; then
    has_error=true
  fi
}

print() {
  local name=$1
  local value

  value=$(git config --global --get "alias.$name" 2> /dev/null)
  if [ $? -eq 0 ]; then
    stdout+="git alias $name='${value//\'/\'\\\'\'}'"'
'
  else
    echo -n "$stdout"
    echo "git-alias: $name: not found" >&2

    stdout=""
    has_error=true
  fi
}

# Not only fetch the variable list
# but validate the global `.gitconfig' file itself:
# check if it exists and its format is valid.
config_list=$(git config --global --list --name-only 2>&1)
if [ $? -ne 0 ]; then
  # The output is equivalent to an error message
  # directly emitted by `git-config' under normal use.
  echo "$config_list" >&2
  exit 2
fi

stdout=""
has_error=false

if $should_print_all; then
  while read -r name; do
    print "$name"
  done <<< $(sed -En "s/^alias\.//p" <<< $config_list | LANG=C sort)
fi

for arg in "$@"; do
  case $arg in
    [!=]*=* )
      define "${arg%%=*}" "${arg#*=}"
      ;;

    * )
      print "$arg"
      ;;
  esac
done

echo -n "$stdout"

if $has_error; then
  exit 1
fi
